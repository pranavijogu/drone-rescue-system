{"ast":null,"code":"var _jsxFileName = \"/Users/pranavi/Documents/Drone Project/droneproject/Frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport axios from 'axios';\nimport './MapComponent.css';\n\n// Define libraries needed for Google Maps functionality\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = ['drawing', 'places'];\nconst MapComponent = ({\n  onDispatchDrone\n}) => {\n  _s();\n  // State management for various map interactions\n  const [selectedArea, setSelectedArea] = useState(null);\n  const [drawingManager, setDrawingManager] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(''); // Track search input text\n\n  // Default map center coordinates\n  const center = {\n    lat: 17.39716,\n    lng: 78.49040\n  };\n\n  // Load Google Maps script with necessary libraries\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyB-6NuWru71NBpaRmAaiEZjRmTJnUfQBbQ',\n    libraries\n  });\n\n  // References for search box, map, and autocomplete\n  const searchBoxRef = useRef(null);\n  const mapRef = useRef(null);\n  const autocompleteRef = useRef(null);\n\n  // Map container style to fill entire container\n  const mapContainerStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  };\n\n  // Detailed map options for customized view\n  const mapOptions = {\n    zoom: 18,\n    center: center,\n    mapTypeId: 'satellite',\n    mapTypeControl: false,\n    streetViewControl: false,\n    fullscreenControl: true,\n    zoomControl: true\n  };\n\n  // Initialize drawing manager for area selection\n  const onLoad = useCallback(map => {\n    const drawingManagerInstance = new window.google.maps.drawing.DrawingManager({\n      drawingMode: null,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE]\n      }\n    });\n    drawingManagerInstance.setMap(map);\n    setDrawingManager(drawingManagerInstance);\n\n    // Listener for when a rectangle is drawn\n    window.google.maps.event.addListener(drawingManagerInstance, 'rectanglecomplete', rectangle => {\n      const bounds = rectangle.getBounds();\n      const selectedBounds = bounds.toJSON();\n      setSelectedArea(selectedBounds);\n    });\n  }, []);\n\n  // Clean up drawing manager when component unmounts\n  const onUnmount = useCallback(() => {\n    if (drawingManager) {\n      drawingManager.setMap(null);\n    }\n  }, [drawingManager]);\n\n  // Set up Autocomplete for search functionality\n  const handleSearch = useCallback(() => {\n    if (searchBoxRef.current && !autocompleteRef.current) {\n      // Create Autocomplete instance only once\n      autocompleteRef.current = new window.google.maps.places.Autocomplete(searchBoxRef.current, {\n        types: ['geocode']\n      });\n\n      // Listener for when a place is selected\n      autocompleteRef.current.addListener('place_changed', () => {\n        const place = autocompleteRef.current.getPlace();\n        if (place.geometry) {\n          const {\n            lat,\n            lng\n          } = place.geometry.location;\n          setSelectedLocation({\n            lat: lat(),\n            lng: lng()\n          });\n          // Pan map to selected location\n          mapRef.current.panTo(place.geometry.location);\n          // Clear search input after selection\n          setSearchTerm('');\n        } else {\n          alert(\"No details available for the selected place.\");\n        }\n      });\n    }\n  }, []);\n\n  // Ensure Autocomplete is initialized when search input changes\n  const handleSearchInputChange = e => {\n    setSearchTerm(e.target.value);\n    if (!autocompleteRef.current) {\n      handleSearch(); // Initialize Autocomplete only if not already set up\n    }\n  };\n\n  // Drone dispatch logic\n  const handleDispatchDrone = async () => {\n    if (selectedArea) {\n      try {\n        const requestData = {\n          top_left: {\n            latitude: parseFloat(selectedArea.north).toFixed(6),\n            longitude: parseFloat(selectedArea.west).toFixed(6)\n          },\n          bottom_right: {\n            latitude: parseFloat(selectedArea.south).toFixed(6),\n            longitude: parseFloat(selectedArea.east).toFixed(6)\n          }\n        };\n        const response = await axios.post('http://172.168.0.157:3001/drone/dispatch/rectangle', requestData);\n        console.log('Drone dispatched:', response.data);\n      } catch (error) {\n        console.error('Error dispatching drone:', error);\n        alert('Failed to dispatch drone');\n      }\n    } else {\n      alert('No area selected');\n    }\n  };\n\n  // Handle loading and error states\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-error\",\n      children: \"Error loading maps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading\",\n      children: \"Loading maps...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: searchBoxRef,\n      type: \"text\",\n      placeholder: \"Search a place\",\n      className: \"search-box\",\n      value: searchTerm // Controlled input\n      ,\n      onChange: handleSearchInputChange // Update search term as user types\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drone-camera-feed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"camera-feed-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"camera-feed-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            width: \"16\",\n            height: \"16\",\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            stroke: \"currentColor\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"12\",\n              cy: \"13\",\n              r: \"4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 11\n          }, this), \"Drone Camera Feed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"live-dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 11\n          }, this), \"LIVE\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"camera-feed-content\",\n        children: \"Connecting to drone camera...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      ref: mapRef,\n      mapContainerStyle: mapContainerStyle,\n      options: mapOptions,\n      onLoad: onLoad,\n      onUnmount: onUnmount,\n      defaultCenter: center // Set default center for initial load\n      ,\n      defaultZoom: 18\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), selectedArea && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDispatchDrone,\n      className: \"dispatch-button\",\n      children: \"Dispatch Drone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"C8kEZYKAg+zYu+MuAQGAyCyBgnE=\", false, function () {\n  return [useLoadScript];\n});\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useCallback","useRef","GoogleMap","useLoadScript","axios","jsxDEV","_jsxDEV","libraries","MapComponent","onDispatchDrone","_s","selectedArea","setSelectedArea","drawingManager","setDrawingManager","selectedLocation","setSelectedLocation","searchTerm","setSearchTerm","center","lat","lng","isLoaded","loadError","googleMapsApiKey","searchBoxRef","mapRef","autocompleteRef","mapContainerStyle","width","height","position","top","left","right","bottom","mapOptions","zoom","mapTypeId","mapTypeControl","streetViewControl","fullscreenControl","zoomControl","onLoad","map","drawingManagerInstance","window","google","maps","drawing","DrawingManager","drawingMode","drawingControl","drawingControlOptions","ControlPosition","TOP_CENTER","drawingModes","OverlayType","RECTANGLE","setMap","event","addListener","rectangle","bounds","getBounds","selectedBounds","toJSON","onUnmount","handleSearch","current","places","Autocomplete","types","place","getPlace","geometry","location","panTo","alert","handleSearchInputChange","e","target","value","handleDispatchDrone","requestData","top_left","latitude","parseFloat","north","toFixed","longitude","west","bottom_right","south","east","response","post","console","log","data","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","placeholder","onChange","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","cx","cy","r","options","defaultCenter","defaultZoom","onClick","_c","$RefreshReg$"],"sources":["/Users/pranavi/Documents/Drone Project/droneproject/Frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport axios from 'axios';\nimport './MapComponent.css';\n\n// Define libraries needed for Google Maps functionality\nconst libraries = ['drawing', 'places'];\n\nconst MapComponent = ({ onDispatchDrone }) => {\n  // State management for various map interactions\n  const [selectedArea, setSelectedArea] = useState(null);\n  const [drawingManager, setDrawingManager] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(''); // Track search input text\n\n  // Default map center coordinates\n  const center = {\n    lat: 17.39716,\n    lng: 78.49040,\n  };\n\n  // Load Google Maps script with necessary libraries\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyB-6NuWru71NBpaRmAaiEZjRmTJnUfQBbQ',\n    libraries,\n  });\n\n  // References for search box, map, and autocomplete\n  const searchBoxRef = useRef(null);\n  const mapRef = useRef(null);\n  const autocompleteRef = useRef(null);\n\n  // Map container style to fill entire container\n  const mapContainerStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  };\n\n  // Detailed map options for customized view\n  const mapOptions = {\n    zoom: 18,\n    center: center,\n    mapTypeId: 'satellite',\n    mapTypeControl: false,\n    streetViewControl: false,\n    fullscreenControl: true,\n    zoomControl: true,\n  };\n\n  // Initialize drawing manager for area selection\n  const onLoad = useCallback((map) => {\n    const drawingManagerInstance = new window.google.maps.drawing.DrawingManager({\n      drawingMode: null,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [\n          window.google.maps.drawing.OverlayType.RECTANGLE,\n        ],\n      },\n    });\n\n    drawingManagerInstance.setMap(map);\n    setDrawingManager(drawingManagerInstance);\n\n    // Listener for when a rectangle is drawn\n    window.google.maps.event.addListener(drawingManagerInstance, 'rectanglecomplete', (rectangle) => {\n      const bounds = rectangle.getBounds();\n      const selectedBounds = bounds.toJSON();\n      setSelectedArea(selectedBounds);\n    });\n  }, []);\n\n  // Clean up drawing manager when component unmounts\n  const onUnmount = useCallback(() => {\n    if (drawingManager) {\n      drawingManager.setMap(null);\n    }\n  }, [drawingManager]);\n\n  // Set up Autocomplete for search functionality\n  const handleSearch = useCallback(() => {\n    if (searchBoxRef.current && !autocompleteRef.current) {\n      // Create Autocomplete instance only once\n      autocompleteRef.current = new window.google.maps.places.Autocomplete(\n        searchBoxRef.current, \n        { types: ['geocode'] }\n      );\n      \n      // Listener for when a place is selected\n      autocompleteRef.current.addListener('place_changed', () => {\n        const place = autocompleteRef.current.getPlace();\n        if (place.geometry) {\n          const { lat, lng } = place.geometry.location;\n          setSelectedLocation({ lat: lat(), lng: lng() });\n          // Pan map to selected location\n          mapRef.current.panTo(place.geometry.location);\n          // Clear search input after selection\n          setSearchTerm('');\n        } else {\n          alert(\"No details available for the selected place.\");\n        }\n      });\n    }\n  }, []);\n\n  // Ensure Autocomplete is initialized when search input changes\n  const handleSearchInputChange = (e) => {\n    setSearchTerm(e.target.value);\n    if (!autocompleteRef.current) {\n      handleSearch(); // Initialize Autocomplete only if not already set up\n    }\n  };\n\n  // Drone dispatch logic\n  const handleDispatchDrone = async () => {\n    if (selectedArea) {\n      try {\n        const requestData = {\n          top_left: {\n            latitude: parseFloat(selectedArea.north).toFixed(6),\n            longitude: parseFloat(selectedArea.west).toFixed(6),\n          },\n          bottom_right: {\n            latitude: parseFloat(selectedArea.south).toFixed(6),\n            longitude: parseFloat(selectedArea.east).toFixed(6),\n          },\n        };\n        \n        const response = await axios.post('http://172.168.0.157:3001/drone/dispatch/rectangle', requestData);\n        console.log('Drone dispatched:', response.data);\n      } catch (error) {\n        console.error('Error dispatching drone:', error);\n        alert('Failed to dispatch drone');\n      }\n    } else {\n      alert('No area selected');\n    }\n  };\n\n  // Handle loading and error states\n  if (loadError) {\n    return <div className=\"map-error\">Error loading maps</div>;\n  }\n\n  if (!isLoaded) {\n    return <div className=\"map-loading\">Loading maps...</div>;\n  }\n\n  return (\n    <div className=\"map-wrapper\">\n      {/* Search input with controlled value */}\n      <input\n        ref={searchBoxRef}\n        type=\"text\"\n        placeholder=\"Search a place\"\n        className=\"search-box\"\n        value={searchTerm} // Controlled input\n        onChange={handleSearchInputChange} // Update search term as user types\n      />\n      \n      <div className=\"drone-camera-feed\">\n      <div className=\"camera-feed-header\">\n        <div className=\"camera-feed-title\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n            <path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\"/>\n            <circle cx=\"12\" cy=\"13\" r=\"4\"/>\n          </svg>\n          Drone Camera Feed\n        </div>\n        <div className=\"live-indicator\">\n          <div className=\"live-dot\"></div>\n          LIVE\n        </div>\n      </div>\n      <div className=\"camera-feed-content\">\n        Connecting to drone camera...\n      </div>\n    </div>\n    \n      {/* Google Map component */}\n      <GoogleMap\n        ref={mapRef}\n        mapContainerStyle={mapContainerStyle}\n        options={mapOptions}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n        defaultCenter={center} // Set default center for initial load\n        defaultZoom={18}\n      >\n      </GoogleMap>\n      \n      {/* Drone dispatch button appears when an area is selected */}\n      {selectedArea && (\n        <button onClick={handleDispatchDrone} className=\"dispatch-button\">\n          Dispatch Drone\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default MapComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAC5D,SAASC,SAAS,EAAEC,aAAa,QAAQ,wBAAwB;AACjE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,oBAAoB;;AAE3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC;AAEvC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElD;EACA,MAAMoB,MAAM,GAAG;IACbC,GAAG,EAAE,QAAQ;IACbC,GAAG,EAAE;EACP,CAAC;;EAED;EACA,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGpB,aAAa,CAAC;IAC5CqB,gBAAgB,EAAE,yCAAyC;IAC3DjB;EACF,CAAC,CAAC;;EAEF;EACA,MAAMkB,YAAY,GAAGxB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMyB,MAAM,GAAGzB,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM0B,eAAe,GAAG1B,MAAM,CAAC,IAAI,CAAC;;EAEpC;EACA,MAAM2B,iBAAiB,GAAG;IACxBC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,MAAM;IACdC,QAAQ,EAAE,UAAU;IACpBC,GAAG,EAAE,CAAC;IACNC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;EACV,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG;IACjBC,IAAI,EAAE,EAAE;IACRlB,MAAM,EAAEA,MAAM;IACdmB,SAAS,EAAE,WAAW;IACtBC,cAAc,EAAE,KAAK;IACrBC,iBAAiB,EAAE,KAAK;IACxBC,iBAAiB,EAAE,IAAI;IACvBC,WAAW,EAAE;EACf,CAAC;;EAED;EACA,MAAMC,MAAM,GAAG3C,WAAW,CAAE4C,GAAG,IAAK;IAClC,MAAMC,sBAAsB,GAAG,IAAIC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,OAAO,CAACC,cAAc,CAAC;MAC3EC,WAAW,EAAE,IAAI;MACjBC,cAAc,EAAE,IAAI;MACpBC,qBAAqB,EAAE;QACrBtB,QAAQ,EAAEe,MAAM,CAACC,MAAM,CAACC,IAAI,CAACM,eAAe,CAACC,UAAU;QACvDC,YAAY,EAAE,CACZV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,OAAO,CAACQ,WAAW,CAACC,SAAS;MAEpD;IACF,CAAC,CAAC;IAEFb,sBAAsB,CAACc,MAAM,CAACf,GAAG,CAAC;IAClC9B,iBAAiB,CAAC+B,sBAAsB,CAAC;;IAEzC;IACAC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACY,KAAK,CAACC,WAAW,CAAChB,sBAAsB,EAAE,mBAAmB,EAAGiB,SAAS,IAAK;MAC/F,MAAMC,MAAM,GAAGD,SAAS,CAACE,SAAS,CAAC,CAAC;MACpC,MAAMC,cAAc,GAAGF,MAAM,CAACG,MAAM,CAAC,CAAC;MACtCtD,eAAe,CAACqD,cAAc,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,SAAS,GAAGnE,WAAW,CAAC,MAAM;IAClC,IAAIa,cAAc,EAAE;MAClBA,cAAc,CAAC8C,MAAM,CAAC,IAAI,CAAC;IAC7B;EACF,CAAC,EAAE,CAAC9C,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAMuD,YAAY,GAAGpE,WAAW,CAAC,MAAM;IACrC,IAAIyB,YAAY,CAAC4C,OAAO,IAAI,CAAC1C,eAAe,CAAC0C,OAAO,EAAE;MACpD;MACA1C,eAAe,CAAC0C,OAAO,GAAG,IAAIvB,MAAM,CAACC,MAAM,CAACC,IAAI,CAACsB,MAAM,CAACC,YAAY,CAClE9C,YAAY,CAAC4C,OAAO,EACpB;QAAEG,KAAK,EAAE,CAAC,SAAS;MAAE,CACvB,CAAC;;MAED;MACA7C,eAAe,CAAC0C,OAAO,CAACR,WAAW,CAAC,eAAe,EAAE,MAAM;QACzD,MAAMY,KAAK,GAAG9C,eAAe,CAAC0C,OAAO,CAACK,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAK,CAACE,QAAQ,EAAE;UAClB,MAAM;YAAEvD,GAAG;YAAEC;UAAI,CAAC,GAAGoD,KAAK,CAACE,QAAQ,CAACC,QAAQ;UAC5C5D,mBAAmB,CAAC;YAAEI,GAAG,EAAEA,GAAG,CAAC,CAAC;YAAEC,GAAG,EAAEA,GAAG,CAAC;UAAE,CAAC,CAAC;UAC/C;UACAK,MAAM,CAAC2C,OAAO,CAACQ,KAAK,CAACJ,KAAK,CAACE,QAAQ,CAACC,QAAQ,CAAC;UAC7C;UACA1D,aAAa,CAAC,EAAE,CAAC;QACnB,CAAC,MAAM;UACL4D,KAAK,CAAC,8CAA8C,CAAC;QACvD;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,uBAAuB,GAAIC,CAAC,IAAK;IACrC9D,aAAa,CAAC8D,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAC7B,IAAI,CAACvD,eAAe,CAAC0C,OAAO,EAAE;MAC5BD,YAAY,CAAC,CAAC,CAAC,CAAC;IAClB;EACF,CAAC;;EAED;EACA,MAAMe,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAIxE,YAAY,EAAE;MAChB,IAAI;QACF,MAAMyE,WAAW,GAAG;UAClBC,QAAQ,EAAE;YACRC,QAAQ,EAAEC,UAAU,CAAC5E,YAAY,CAAC6E,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;YACnDC,SAAS,EAAEH,UAAU,CAAC5E,YAAY,CAACgF,IAAI,CAAC,CAACF,OAAO,CAAC,CAAC;UACpD,CAAC;UACDG,YAAY,EAAE;YACZN,QAAQ,EAAEC,UAAU,CAAC5E,YAAY,CAACkF,KAAK,CAAC,CAACJ,OAAO,CAAC,CAAC,CAAC;YACnDC,SAAS,EAAEH,UAAU,CAAC5E,YAAY,CAACmF,IAAI,CAAC,CAACL,OAAO,CAAC,CAAC;UACpD;QACF,CAAC;QAED,MAAMM,QAAQ,GAAG,MAAM3F,KAAK,CAAC4F,IAAI,CAAC,oDAAoD,EAAEZ,WAAW,CAAC;QACpGa,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,QAAQ,CAACI,IAAI,CAAC;MACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDtB,KAAK,CAAC,0BAA0B,CAAC;MACnC;IACF,CAAC,MAAM;MACLA,KAAK,CAAC,kBAAkB,CAAC;IAC3B;EACF,CAAC;;EAED;EACA,IAAIvD,SAAS,EAAE;IACb,oBAAOjB,OAAA;MAAK+F,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC5D;EAEA,IAAI,CAACpF,QAAQ,EAAE;IACb,oBAAOhB,OAAA;MAAK+F,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC3D;EAEA,oBACEpG,OAAA;IAAK+F,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAE1BhG,OAAA;MACEqG,GAAG,EAAElF,YAAa;MAClBmF,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,gBAAgB;MAC5BR,SAAS,EAAC,YAAY;MACtBnB,KAAK,EAAEjE,UAAW,CAAC;MAAA;MACnB6F,QAAQ,EAAE/B,uBAAwB,CAAC;IAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eAEFpG,OAAA;MAAK+F,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAClChG,OAAA;QAAK+F,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBACjChG,OAAA;UAAK+F,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChChG,OAAA;YAAKyG,KAAK,EAAC,4BAA4B;YAAClF,KAAK,EAAC,IAAI;YAACC,MAAM,EAAC,IAAI;YAACkF,OAAO,EAAC,WAAW;YAACC,IAAI,EAAC,MAAM;YAACC,MAAM,EAAC,cAAc;YAACC,WAAW,EAAC,GAAG;YAACC,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAAAf,QAAA,gBAC/KhG,OAAA;cAAMgH,CAAC,EAAC;YAAmF;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC,eAC7FpG,OAAA;cAAQiH,EAAE,EAAC,IAAI;cAACC,EAAE,EAAC,IAAI;cAACC,CAAC,EAAC;YAAG;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC,qBAER;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACNpG,OAAA;UAAK+F,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7BhG,OAAA;YAAK+F,SAAS,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,QAElC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNpG,OAAA;QAAK+F,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EAAC;MAErC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGJpG,OAAA,CAACJ,SAAS;MACRyG,GAAG,EAAEjF,MAAO;MACZE,iBAAiB,EAAEA,iBAAkB;MACrC8F,OAAO,EAAEtF,UAAW;MACpBO,MAAM,EAAEA,MAAO;MACfwB,SAAS,EAAEA,SAAU;MACrBwD,aAAa,EAAExG,MAAO,CAAC;MAAA;MACvByG,WAAW,EAAE;IAAG;MAAArB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEP,CAAC,EAGX/F,YAAY,iBACXL,OAAA;MAAQuH,OAAO,EAAE1C,mBAAoB;MAACkB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAElE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChG,EAAA,CArMIF,YAAY;EAAA,QAcgBL,aAAa;AAAA;AAAA2H,EAAA,GAdzCtH,YAAY;AAuMlB,eAAeA,YAAY;AAAC,IAAAsH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}