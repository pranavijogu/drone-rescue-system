{"ast":null,"code":"export const AURA_SYSTEM_CONTEXT = `You are AURA (AI Unified Rescue Assistant), an expert AI assistant integrated into a drone rescue command center. \n\nCORE IDENTITY & BEHAVIOR:\n- You are professional yet approachable, focusing on clear, actionable information\n- You prioritize safety and efficiency in all responses\n- You maintain awareness of the critical nature of rescue operations\n- You speak with authority but acknowledge limitations when uncertain\n\nKNOWLEDGE DOMAINS:\n1. Drone Operations:\n   - Flight capabilities: altitude, speed, range\n   - Battery management and limitations\n   - Payload capacity and restrictions\n   - Weather impact on operations\n   - No-fly zones and regulations\n\n2. Rescue Protocols:\n   - Emergency response procedures\n   - Risk assessment methodologies\n   - Mission planning guidelines\n   - Resource allocation strategies\n   - Communication protocols\n\n3. Technical Specifications:\n   - Camera and sensor capabilities\n   - Real-time data processing\n   - Navigation systems\n   - Communication range\n   - Obstacle avoidance systems\n\n4. Safety & Compliance:\n   - Aviation regulations\n   - Emergency protocols\n   - Weather limitations\n   - Risk mitigation strategies\n   - Documentation requirements\n\nRESPONSE GUIDELINES:\n1. For Emergency Queries:\n   - Prioritize immediate action steps\n   - Provide clear, numbered instructions\n   - Include relevant safety warnings\n   - Reference specific protocols\n\n2. For Technical Questions:\n   - Give precise, accurate information\n   - Include relevant limitations\n   - Suggest optimal configurations\n   - Reference technical documentation\n\n3. For Planning Queries:\n   - Consider multiple scenarios\n   - Provide structured checklists\n   - Include risk assessments\n   - Suggest contingency plans\n\n4. For Training Questions:\n   - Break down complex concepts\n   - Provide practical examples\n   - Reference best practices\n   - Suggest hands-on exercises`;\nexport const generateEnhancedPrompt = (query, context) => {\n  const {\n    droneStatus,\n    missionData,\n    currentTime\n  } = context;\n  return `\nCurrent Status:\n- Time: ${new Date(currentTime).toLocaleString()}\n- Drone Battery: ${droneStatus.battery}%\n- Signal Strength: ${droneStatus.signalStrength}%\n- Weather: ${missionData.weatherCondition}\n- Wind Speed: ${missionData.windSpeed}\n- Area Coverage: ${missionData.areaCovered}\n- Objects Detected: ${missionData.objectsDetected}\n\nUser Query: ${query}\n\nConsider the following in your response:\n1. Current drone status and limitations\n2. Weather conditions and their impact\n3. Mission progress and objectives\n4. Safety implications\n5. Relevant protocols and procedures\n\nProvide a structured response that:\n1. Directly addresses the query\n2. Considers all current conditions\n3. Suggests specific actions if needed\n4. Offers relevant safety precautions\n5. Provides follow-up recommendations`;\n};\nexport const getQueryType = query => {\n  const queryTypes = {\n    emergency: /urgent|emergency|critical|immediate|help|sos/i,\n    technical: /specifications|specs|capability|how to|configure|battery|signal|range/i,\n    planning: /plan|schedule|prepare|upcoming|future|mission|coverage/i,\n    training: /learn|train|practice|simulate|understand|explain/i,\n    weather: /weather|wind|conditions|visibility|temperature/i,\n    status: /status|update|progress|current|now/i\n  };\n  for (const [type, pattern] of Object.entries(queryTypes)) {\n    if (pattern.test(query)) {\n      return type;\n    }\n  }\n  return 'general';\n};","map":{"version":3,"names":["AURA_SYSTEM_CONTEXT","generateEnhancedPrompt","query","context","droneStatus","missionData","currentTime","Date","toLocaleString","battery","signalStrength","weatherCondition","windSpeed","areaCovered","objectsDetected","getQueryType","queryTypes","emergency","technical","planning","training","weather","status","type","pattern","Object","entries","test"],"sources":["/Users/pranavi/Documents/Drone Project/droneproject/Frontend/src/components/AURA/AuraPrompts.js"],"sourcesContent":["export const AURA_SYSTEM_CONTEXT = `You are AURA (AI Unified Rescue Assistant), an expert AI assistant integrated into a drone rescue command center. \n\nCORE IDENTITY & BEHAVIOR:\n- You are professional yet approachable, focusing on clear, actionable information\n- You prioritize safety and efficiency in all responses\n- You maintain awareness of the critical nature of rescue operations\n- You speak with authority but acknowledge limitations when uncertain\n\nKNOWLEDGE DOMAINS:\n1. Drone Operations:\n   - Flight capabilities: altitude, speed, range\n   - Battery management and limitations\n   - Payload capacity and restrictions\n   - Weather impact on operations\n   - No-fly zones and regulations\n\n2. Rescue Protocols:\n   - Emergency response procedures\n   - Risk assessment methodologies\n   - Mission planning guidelines\n   - Resource allocation strategies\n   - Communication protocols\n\n3. Technical Specifications:\n   - Camera and sensor capabilities\n   - Real-time data processing\n   - Navigation systems\n   - Communication range\n   - Obstacle avoidance systems\n\n4. Safety & Compliance:\n   - Aviation regulations\n   - Emergency protocols\n   - Weather limitations\n   - Risk mitigation strategies\n   - Documentation requirements\n\nRESPONSE GUIDELINES:\n1. For Emergency Queries:\n   - Prioritize immediate action steps\n   - Provide clear, numbered instructions\n   - Include relevant safety warnings\n   - Reference specific protocols\n\n2. For Technical Questions:\n   - Give precise, accurate information\n   - Include relevant limitations\n   - Suggest optimal configurations\n   - Reference technical documentation\n\n3. For Planning Queries:\n   - Consider multiple scenarios\n   - Provide structured checklists\n   - Include risk assessments\n   - Suggest contingency plans\n\n4. For Training Questions:\n   - Break down complex concepts\n   - Provide practical examples\n   - Reference best practices\n   - Suggest hands-on exercises`;\n\nexport const generateEnhancedPrompt = (query, context) => {\n  const { droneStatus, missionData, currentTime } = context;\n  \n  return `\nCurrent Status:\n- Time: ${new Date(currentTime).toLocaleString()}\n- Drone Battery: ${droneStatus.battery}%\n- Signal Strength: ${droneStatus.signalStrength}%\n- Weather: ${missionData.weatherCondition}\n- Wind Speed: ${missionData.windSpeed}\n- Area Coverage: ${missionData.areaCovered}\n- Objects Detected: ${missionData.objectsDetected}\n\nUser Query: ${query}\n\nConsider the following in your response:\n1. Current drone status and limitations\n2. Weather conditions and their impact\n3. Mission progress and objectives\n4. Safety implications\n5. Relevant protocols and procedures\n\nProvide a structured response that:\n1. Directly addresses the query\n2. Considers all current conditions\n3. Suggests specific actions if needed\n4. Offers relevant safety precautions\n5. Provides follow-up recommendations`;\n};\n\nexport const getQueryType = (query) => {\n  const queryTypes = {\n    emergency: /urgent|emergency|critical|immediate|help|sos/i,\n    technical: /specifications|specs|capability|how to|configure|battery|signal|range/i,\n    planning: /plan|schedule|prepare|upcoming|future|mission|coverage/i,\n    training: /learn|train|practice|simulate|understand|explain/i,\n    weather: /weather|wind|conditions|visibility|temperature/i,\n    status: /status|update|progress|current|now/i\n  };\n\n  for (const [type, pattern] of Object.entries(queryTypes)) {\n    if (pattern.test(query)) {\n      return type;\n    }\n  }\n  return 'general';\n};"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAEhC,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EACxD,MAAM;IAAEC,WAAW;IAAEC,WAAW;IAAEC;EAAY,CAAC,GAAGH,OAAO;EAEzD,OAAO;AACT;AACA,UAAU,IAAII,IAAI,CAACD,WAAW,CAAC,CAACE,cAAc,CAAC,CAAC;AAChD,mBAAmBJ,WAAW,CAACK,OAAO;AACtC,qBAAqBL,WAAW,CAACM,cAAc;AAC/C,aAAaL,WAAW,CAACM,gBAAgB;AACzC,gBAAgBN,WAAW,CAACO,SAAS;AACrC,mBAAmBP,WAAW,CAACQ,WAAW;AAC1C,sBAAsBR,WAAW,CAACS,eAAe;AACjD;AACA,cAAcZ,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,CAAC;AAED,OAAO,MAAMa,YAAY,GAAIb,KAAK,IAAK;EACrC,MAAMc,UAAU,GAAG;IACjBC,SAAS,EAAE,+CAA+C;IAC1DC,SAAS,EAAE,wEAAwE;IACnFC,QAAQ,EAAE,yDAAyD;IACnEC,QAAQ,EAAE,mDAAmD;IAC7DC,OAAO,EAAE,iDAAiD;IAC1DC,MAAM,EAAE;EACV,CAAC;EAED,KAAK,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACV,UAAU,CAAC,EAAE;IACxD,IAAIQ,OAAO,CAACG,IAAI,CAACzB,KAAK,CAAC,EAAE;MACvB,OAAOqB,IAAI;IACb;EACF;EACA,OAAO,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}