{"ast":null,"code":"var _jsxFileName = \"/Users/pranavi/Documents/Drone Project/droneproject/Frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { GoogleMap, Polyline, useLoadScript } from '@react-google-maps/api';\nimport axios from 'axios';\nimport './MapComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = ['drawing', 'places'];\nconst MapComponent = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  onDispatchDrone\n}, ref) => {\n  _s();\n  const [selectedArea, setSelectedArea] = useState(null);\n  const [drawingManager, setDrawingManager] = useState(null);\n  const [gridLines, setGridLines] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const center = {\n    lat: 17.39716,\n    lng: 78.49040\n  };\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyB-6NuWru71NBpaRmAaiEZjRmTJnUfQBbQ',\n    libraries\n  });\n  const searchBoxRef = useRef(null);\n  const mapRef = useRef(null);\n  const autocompleteRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    handleDispatchDrone: () => {\n      if (selectedArea) {\n        dispatchDroneToArea(selectedArea);\n      } else {\n        onDispatchDrone('Please select an area on the map first');\n      }\n    }\n  }));\n  const mapContainerStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  };\n  const mapOptions = {\n    zoom: 18,\n    center: center,\n    mapTypeId: 'satellite',\n    mapTypeControl: false,\n    streetViewControl: false,\n    fullscreenControl: true,\n    zoomControl: true\n  };\n  const onLoad = useCallback(map => {\n    if (typeof window !== 'undefined' && window.google && window.google.maps) {\n      const drawingManagerInstance = new window.google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE]\n        }\n      });\n      drawingManagerInstance.setMap(map);\n      setDrawingManager(drawingManagerInstance);\n      window.google.maps.event.addListener(drawingManagerInstance, 'rectanglecomplete', rectangle => {\n        const bounds = rectangle.getBounds();\n        const selectedBounds = bounds.toJSON();\n        setSelectedArea(selectedBounds);\n\n        // Call function to draw grid\n        drawGrid(selectedBounds);\n      });\n    }\n  }, []);\n  const onUnmount = useCallback(() => {\n    if (drawingManager) {\n      drawingManager.setMap(null);\n    }\n  }, [drawingManager]);\n  const drawGrid = area => {\n    const gridLinesArray = [];\n    const latStep = (area.north - area.south) / 10; // Adjust the grid density here (still keeping it for reference, though unused for vertical only)\n    const lngStep = (area.east - area.west) / 50; // Increase the number to reduce the spacing between vertical grid lines\n\n    // Only Vertical grid lines\n    for (let i = 0; i <= 50; i++) {\n      // Increase the iteration for more lines (adjust the number for spacing)\n      const lng = area.west + lngStep * i;\n      const latStart = area.south;\n      const latEnd = area.north;\n\n      // Draw vertical grid lines only\n      gridLinesArray.push([{\n        lat: latStart,\n        lng\n      }, {\n        lat: latEnd,\n        lng\n      }]);\n    }\n    setGridLines(gridLinesArray);\n  };\n  const handleSearch = useCallback(() => {\n    if (typeof window !== 'undefined' && window.google && window.google.maps) {\n      if (searchBoxRef.current && !autocompleteRef.current) {\n        autocompleteRef.current = new window.google.maps.places.Autocomplete(searchBoxRef.current, {\n          types: ['geocode']\n        });\n        autocompleteRef.current.addListener('place_changed', () => {\n          const place = autocompleteRef.current.getPlace();\n          if (place.geometry) {\n            const {\n              lat,\n              lng\n            } = place.geometry.location;\n            setSelectedLocation({\n              lat: lat(),\n              lng: lng()\n            });\n            mapRef.current.panTo(place.geometry.location);\n            setSearchTerm('');\n          } else {\n            alert(\"No details available for the selected place.\");\n          }\n        });\n      }\n    }\n  }, []);\n  const dispatchDroneToArea = async area => {\n    try {\n      const requestData = {\n        top_left: {\n          latitude: parseFloat(area.north).toFixed(6),\n          longitude: parseFloat(area.west).toFixed(6)\n        },\n        bottom_right: {\n          latitude: parseFloat(area.south).toFixed(6),\n          longitude: parseFloat(area.east).toFixed(6)\n        }\n      };\n      const response = await axios.post('http://172.168.5.7:3001/drone/dispatch/rectangle', requestData);\n      console.log('Drone dispatched:', response.data);\n      onDispatchDrone('Drone successfully dispatched to the selected area');\n    } catch (error) {\n      console.error('Error dispatching drone:', error);\n      onDispatchDrone('Failed to dispatch drone: ' + error.message);\n    }\n  };\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-error\",\n      children: \"Error loading maps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading\",\n      children: \"Loading maps...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: searchBoxRef,\n      type: \"text\",\n      placeholder: \"Search a place\",\n      className: \"search-box\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      ref: mapRef,\n      mapContainerStyle: mapContainerStyle,\n      options: mapOptions,\n      onLoad: onLoad,\n      onUnmount: onUnmount,\n      center: selectedLocation || center,\n      children: gridLines.map((line, index) => /*#__PURE__*/_jsxDEV(Polyline, {\n        path: line,\n        options: {\n          strokeColor: '#00FF00',\n          // Grid line color\n          strokeOpacity: 0.6,\n          strokeWeight: 2\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}, \"rHV8stoBFth2i9Lqtq+o4Hd8eSo=\", false, function () {\n  return [useLoadScript];\n})), \"rHV8stoBFth2i9Lqtq+o4Hd8eSo=\", false, function () {\n  return [useLoadScript];\n});\n_c2 = MapComponent;\nexport default MapComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapComponent$forwardRef\");\n$RefreshReg$(_c2, \"MapComponent\");","map":{"version":3,"names":["React","useState","useCallback","useRef","forwardRef","useImperativeHandle","GoogleMap","Polyline","useLoadScript","axios","jsxDEV","_jsxDEV","libraries","MapComponent","_s","_c","onDispatchDrone","ref","selectedArea","setSelectedArea","drawingManager","setDrawingManager","gridLines","setGridLines","selectedLocation","setSelectedLocation","searchTerm","setSearchTerm","center","lat","lng","isLoaded","loadError","googleMapsApiKey","searchBoxRef","mapRef","autocompleteRef","handleDispatchDrone","dispatchDroneToArea","mapContainerStyle","width","height","position","top","left","right","bottom","mapOptions","zoom","mapTypeId","mapTypeControl","streetViewControl","fullscreenControl","zoomControl","onLoad","map","window","google","maps","drawingManagerInstance","drawing","DrawingManager","drawingMode","drawingControl","drawingControlOptions","ControlPosition","TOP_CENTER","drawingModes","OverlayType","RECTANGLE","setMap","event","addListener","rectangle","bounds","getBounds","selectedBounds","toJSON","drawGrid","onUnmount","area","gridLinesArray","latStep","north","south","lngStep","east","west","i","latStart","latEnd","push","handleSearch","current","places","Autocomplete","types","place","getPlace","geometry","location","panTo","alert","requestData","top_left","latitude","parseFloat","toFixed","longitude","bottom_right","response","post","console","log","data","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","options","line","index","path","strokeColor","strokeOpacity","strokeWeight","_c2","$RefreshReg$"],"sources":["/Users/pranavi/Documents/Drone Project/droneproject/Frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useCallback, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { GoogleMap, Polyline, useLoadScript } from '@react-google-maps/api';\nimport axios from 'axios';\nimport './MapComponent.css';\n\nconst libraries = ['drawing', 'places'];\n\nconst MapComponent = forwardRef(({ onDispatchDrone }, ref) => {\n  const [selectedArea, setSelectedArea] = useState(null);\n  const [drawingManager, setDrawingManager] = useState(null);\n  const [gridLines, setGridLines] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const center = {\n    lat: 17.39716,\n    lng: 78.49040,\n  };\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyB-6NuWru71NBpaRmAaiEZjRmTJnUfQBbQ',\n    libraries,\n  });\n\n  const searchBoxRef = useRef(null);\n  const mapRef = useRef(null);\n  const autocompleteRef = useRef(null);\n\n  useImperativeHandle(ref, () => ({\n    handleDispatchDrone: () => {\n      if (selectedArea) {\n        dispatchDroneToArea(selectedArea);\n      } else {\n        onDispatchDrone('Please select an area on the map first');\n      }\n    }\n  }));\n\n  const mapContainerStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  };\n\n  const mapOptions = {\n    zoom: 18,\n    center: center,\n    mapTypeId: 'satellite',\n    mapTypeControl: false,\n    streetViewControl: false,\n    fullscreenControl: true,\n    zoomControl: true,\n  };\n\n  const onLoad = useCallback((map) => {\n    if (typeof window !== 'undefined' && window.google && window.google.maps) {\n      const drawingManagerInstance = new window.google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE],\n        },\n      });\n\n      drawingManagerInstance.setMap(map);\n      setDrawingManager(drawingManagerInstance);\n\n      window.google.maps.event.addListener(drawingManagerInstance, 'rectanglecomplete', (rectangle) => {\n        const bounds = rectangle.getBounds();\n        const selectedBounds = bounds.toJSON();\n        setSelectedArea(selectedBounds);\n\n        // Call function to draw grid\n        drawGrid(selectedBounds);\n      });\n    }\n  }, []);\n\n  const onUnmount = useCallback(() => {\n    if (drawingManager) {\n      drawingManager.setMap(null);\n    }\n  }, [drawingManager]);\n\n  const drawGrid = (area) => {\n    const gridLinesArray = [];\n    const latStep = (area.north - area.south) / 10;  // Adjust the grid density here (still keeping it for reference, though unused for vertical only)\n    const lngStep = (area.east - area.west) / 50;  // Increase the number to reduce the spacing between vertical grid lines\n  \n    // Only Vertical grid lines\n    for (let i = 0; i <= 50; i++) {  // Increase the iteration for more lines (adjust the number for spacing)\n      const lng = area.west + lngStep * i;\n      const latStart = area.south;\n      const latEnd = area.north;\n  \n      // Draw vertical grid lines only\n      gridLinesArray.push([\n        { lat: latStart, lng },\n        { lat: latEnd, lng }\n      ]);\n    }\n  \n    setGridLines(gridLinesArray);\n  };\n  \n\n  const handleSearch = useCallback(() => {\n    if (typeof window !== 'undefined' && window.google && window.google.maps) {\n      if (searchBoxRef.current && !autocompleteRef.current) {\n        autocompleteRef.current = new window.google.maps.places.Autocomplete(\n          searchBoxRef.current,\n          { types: ['geocode'] }\n        );\n\n        autocompleteRef.current.addListener('place_changed', () => {\n          const place = autocompleteRef.current.getPlace();\n          if (place.geometry) {\n            const { lat, lng } = place.geometry.location;\n            setSelectedLocation({ lat: lat(), lng: lng() });\n            mapRef.current.panTo(place.geometry.location);\n            setSearchTerm('');\n          } else {\n            alert(\"No details available for the selected place.\");\n          }\n        });\n      }\n    }\n  }, []);\n\n  const dispatchDroneToArea = async (area) => {\n    try {\n      const requestData = {\n        top_left: {\n          latitude: parseFloat(area.north).toFixed(6),\n          longitude: parseFloat(area.west).toFixed(6),\n        },\n        bottom_right: {\n          latitude: parseFloat(area.south).toFixed(6),\n          longitude: parseFloat(area.east).toFixed(6),\n        },\n      };\n\n      const response = await axios.post('http://172.168.5.7:3001/drone/dispatch/rectangle', requestData);\n      console.log('Drone dispatched:', response.data);\n      onDispatchDrone('Drone successfully dispatched to the selected area');\n    } catch (error) {\n      console.error('Error dispatching drone:', error);\n      onDispatchDrone('Failed to dispatch drone: ' + error.message);\n    }\n  };\n\n  if (loadError) {\n    return <div className=\"map-error\">Error loading maps</div>;\n  }\n\n  if (!isLoaded) {\n    return <div className=\"map-loading\">Loading maps...</div>;\n  }\n\n  return (\n    <div className=\"map-wrapper\">\n      <input\n        ref={searchBoxRef}\n        type=\"text\"\n        placeholder=\"Search a place\"\n        className=\"search-box\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n      />\n\n      <GoogleMap\n        ref={mapRef}\n        mapContainerStyle={mapContainerStyle}\n        options={mapOptions}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n        center={selectedLocation || center}\n      >\n        {gridLines.map((line, index) => (\n          <Polyline\n            key={index}\n            path={line}\n            options={{\n              strokeColor: '#00FF00', // Grid line color\n              strokeOpacity: 0.6,\n              strokeWeight: 2,\n            }}\n          />\n        ))}\n      </GoogleMap>\n    </div>\n  );\n});\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}