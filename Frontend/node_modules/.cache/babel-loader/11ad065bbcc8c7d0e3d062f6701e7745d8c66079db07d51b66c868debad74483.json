{"ast":null,"code":"var _jsxFileName = \"/Users/pranavi/Documents/Drone Project/droneproject/Frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from 'react';\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport axios from 'axios';\nimport './MapComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = ['drawing', 'places'];\nconst MapComponent = ({\n  onDispatchDrone\n}) => {\n  _s();\n  const [selectedArea, setSelectedArea] = useState(null);\n  const [drawingManager, setDrawingManager] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const center = {\n    lat: 17.39716,\n    lng: 78.49040\n  };\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyB-6NuWru71NBpaRmAaiEZjRmTJnUfQBbQ',\n    libraries\n  });\n  const searchBoxRef = useRef(null);\n  const mapRef = useRef(null);\n  const autocompleteRef = useRef(null);\n  const mapContainerStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  };\n  const mapOptions = {\n    zoom: 18,\n    center: center,\n    mapTypeId: 'satellite',\n    mapTypeControl: false,\n    streetViewControl: false,\n    fullscreenControl: true,\n    zoomControl: true\n  };\n  const onLoad = useCallback(map => {\n    const drawingManagerInstance = new window.google.maps.drawing.DrawingManager({\n      drawingMode: null,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [window.google.maps.drawing.OverlayType.RECTANGLE]\n      }\n    });\n    drawingManagerInstance.setMap(map);\n    setDrawingManager(drawingManagerInstance);\n    window.google.maps.event.addListener(drawingManagerInstance, 'rectanglecomplete', rectangle => {\n      const bounds = rectangle.getBounds();\n      const selectedBounds = bounds.toJSON();\n      setSelectedArea(selectedBounds);\n    });\n  }, []);\n  const onUnmount = useCallback(() => {\n    if (drawingManager) {\n      drawingManager.setMap(null);\n    }\n  }, [drawingManager]);\n  const handleSearch = useCallback(() => {\n    if (searchBoxRef.current && !autocompleteRef.current) {\n      // Create Autocomplete only once\n      autocompleteRef.current = new window.google.maps.places.Autocomplete(searchBoxRef.current, {\n        types: ['geocode']\n      });\n      autocompleteRef.current.addListener('place_changed', () => {\n        const place = autocompleteRef.current.getPlace();\n        if (place.geometry) {\n          const {\n            lat,\n            lng\n          } = place.geometry.location;\n          setSelectedLocation({\n            lat: lat(),\n            lng: lng()\n          });\n          // Pan to the selected location\n          mapRef.current.panTo(place.geometry.location);\n          // Optional: Clear search input after selection\n          setSearchTerm('');\n        } else {\n          alert(\"No details available for the selected place.\");\n        }\n      });\n    }\n  }, []);\n\n  // New function to handle input changes\n  const handleSearchInputChange = e => {\n    setSearchTerm(e.target.value);\n    handleSearch(); // Ensure Autocomplete is set up\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: searchBoxRef,\n      type: \"text\",\n      placeholder: \"Search a place\",\n      className: \"search-box\",\n      value: searchTerm // Controlled input\n      ,\n      onChange: handleSearchInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      ref: mapRef,\n      mapContainerStyle: mapContainerStyle,\n      options: mapOptions,\n      onLoad: onLoad,\n      onUnmount: onUnmount,\n      center: selectedLocation || center\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), selectedArea && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDispatchDrone,\n      className: \"dispatch-button\",\n      children: \"Dispatch Drone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"C8kEZYKAg+zYu+MuAQGAyCyBgnE=\", false, function () {\n  return [useLoadScript];\n});\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useCallback","useRef","GoogleMap","useLoadScript","axios","jsxDEV","_jsxDEV","libraries","MapComponent","onDispatchDrone","_s","selectedArea","setSelectedArea","drawingManager","setDrawingManager","selectedLocation","setSelectedLocation","searchTerm","setSearchTerm","center","lat","lng","isLoaded","loadError","googleMapsApiKey","searchBoxRef","mapRef","autocompleteRef","mapContainerStyle","width","height","position","top","left","right","bottom","mapOptions","zoom","mapTypeId","mapTypeControl","streetViewControl","fullscreenControl","zoomControl","onLoad","map","drawingManagerInstance","window","google","maps","drawing","DrawingManager","drawingMode","drawingControl","drawingControlOptions","ControlPosition","TOP_CENTER","drawingModes","OverlayType","RECTANGLE","setMap","event","addListener","rectangle","bounds","getBounds","selectedBounds","toJSON","onUnmount","handleSearch","current","places","Autocomplete","types","place","getPlace","geometry","location","panTo","alert","handleSearchInputChange","e","target","value","className","children","ref","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","options","onClick","handleDispatchDrone","_c","$RefreshReg$"],"sources":["/Users/pranavi/Documents/Drone Project/droneproject/Frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport axios from 'axios';\nimport './MapComponent.css';\n\nconst libraries = ['drawing', 'places'];\n\nconst MapComponent = ({ onDispatchDrone }) => {\n  const [selectedArea, setSelectedArea] = useState(null);\n  const [drawingManager, setDrawingManager] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const center = {\n    lat: 17.39716,\n    lng: 78.49040,\n  };\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyB-6NuWru71NBpaRmAaiEZjRmTJnUfQBbQ',\n    libraries,\n  });\n\n  const searchBoxRef = useRef(null);\n  const mapRef = useRef(null);\n  const autocompleteRef = useRef(null); \n\n  const mapContainerStyle = {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  };\n\n  const mapOptions = {\n    zoom: 18,\n    center: center,\n    mapTypeId: 'satellite',\n    mapTypeControl: false,\n    streetViewControl: false,\n    fullscreenControl: true,\n    zoomControl: true,\n  };\n\n  const onLoad = useCallback((map) => {\n    const drawingManagerInstance = new window.google.maps.drawing.DrawingManager({\n      drawingMode: null,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: window.google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [\n          window.google.maps.drawing.OverlayType.RECTANGLE,\n        ],\n      },\n    });\n\n    drawingManagerInstance.setMap(map);\n    setDrawingManager(drawingManagerInstance);\n\n    window.google.maps.event.addListener(drawingManagerInstance, 'rectanglecomplete', (rectangle) => {\n      const bounds = rectangle.getBounds();\n      const selectedBounds = bounds.toJSON();\n      setSelectedArea(selectedBounds);\n    });\n  }, []);\n\n  const onUnmount = useCallback(() => {\n    if (drawingManager) {\n      drawingManager.setMap(null);\n    }\n  }, [drawingManager]);\n\n  const handleSearch = useCallback(() => {\n    if (searchBoxRef.current && !autocompleteRef.current) {\n      // Create Autocomplete only once\n      autocompleteRef.current = new window.google.maps.places.Autocomplete(\n        searchBoxRef.current, \n        { types: ['geocode'] }\n      );\n      \n      autocompleteRef.current.addListener('place_changed', () => {\n        const place = autocompleteRef.current.getPlace();\n        if (place.geometry) {\n          const { lat, lng } = place.geometry.location;\n          setSelectedLocation({ lat: lat(), lng: lng() });\n          // Pan to the selected location\n          mapRef.current.panTo(place.geometry.location);\n          // Optional: Clear search input after selection\n          setSearchTerm('');\n        } else {\n          alert(\"No details available for the selected place.\");\n        }\n      });\n    }\n  }, []);\n\n  // New function to handle input changes\n  const handleSearchInputChange = (e) => {\n    setSearchTerm(e.target.value);\n    handleSearch(); // Ensure Autocomplete is set up\n  };\n\n  return (\n    <div className=\"map-wrapper\">\n      <input\n        ref={searchBoxRef}\n        type=\"text\"\n        placeholder=\"Search a place\"\n        className=\"search-box\"\n        value={searchTerm} // Controlled input\n        onChange={handleSearchInputChange}\n      />\n      <GoogleMap\n        ref={mapRef}\n        mapContainerStyle={mapContainerStyle}\n        options={mapOptions}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n        center={selectedLocation || center}\n      >\n      </GoogleMap>\n      {selectedArea && (\n        <button onClick={handleDispatchDrone} className=\"dispatch-button\">\n          Dispatch Drone\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}