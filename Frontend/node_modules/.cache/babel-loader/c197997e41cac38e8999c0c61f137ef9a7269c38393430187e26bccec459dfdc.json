{"ast":null,"code":"var _jsxFileName = \"/Users/pranavi/Documents/Drone Project/droneproject/Frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { GoogleMap, useLoadScript, DrawingManager } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = ['drawing'];\nconst mapContainerStyle = {\n  height: '500px',\n  width: '100%'\n};\nconst center = {\n  lat: 17.397194281352338,\n  lng: 78.49024767779724\n}; // Hyderabad center\n\nconst MapComponent = ({\n  onLocationSelect\n}) => {\n  _s();\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyB-6NuWru71NBpaRmAaiEZjRmTJnUfQBbQ',\n    // Replace with your actual API key\n    libraries\n  });\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading maps...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 17,\n    center: center,\n    children: /*#__PURE__*/_jsxDEV(DrawingManager, {\n      onPolygonComplete: polygon => {\n        const path = polygon.getPath().getArray().map(latLng => ({\n          lat: latLng.lat(),\n          lng: latLng.lng()\n        }));\n        console.log('Polygon Coordinates:', path);\n        polygon.setMap(null); // Clear the drawn shape if needed\n      },\n      onCircleComplete: circle => {\n        const center = circle.getCenter();\n        const radius = circle.getRadius();\n        console.log('Circle Center:', center.toJSON(), 'Radius:', radius);\n        circle.setMap(null); // Clear the drawn shape if needed\n      },\n      options: {\n        drawingControl: true,\n        drawingControlOptions: {\n          drawingModes: ['polygon', 'rectangle', 'circle']\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"Cye17iwlLw61yP2k5hqy29yMy+o=\", false, function () {\n  return [useLoadScript];\n});\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","GoogleMap","useLoadScript","DrawingManager","jsxDEV","_jsxDEV","libraries","mapContainerStyle","height","width","center","lat","lng","MapComponent","onLocationSelect","_s","isLoaded","loadError","googleMapsApiKey","children","fileName","_jsxFileName","lineNumber","columnNumber","zoom","onPolygonComplete","polygon","path","getPath","getArray","map","latLng","console","log","setMap","onCircleComplete","circle","getCenter","radius","getRadius","toJSON","options","drawingControl","drawingControlOptions","drawingModes","_c","$RefreshReg$"],"sources":["/Users/pranavi/Documents/Drone Project/droneproject/Frontend/src/components/MapComponent.js"],"sourcesContent":["import React from 'react';\nimport { GoogleMap, useLoadScript, DrawingManager } from '@react-google-maps/api';\n\nconst libraries = ['drawing'];\nconst mapContainerStyle = {\n  height: '500px',\n  width: '100%',\n};\n\nconst center = { lat: 17.397194281352338, lng: 78.49024767779724 }; // Hyderabad center\n\nconst MapComponent = ({ onLocationSelect }) => {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyB-6NuWru71NBpaRmAaiEZjRmTJnUfQBbQ', // Replace with your actual API key\n    libraries,\n  });\n\n  if (loadError) return <div>Error loading maps</div>;\n  if (!isLoaded) return <div>Loading maps...</div>;\n\n  return (\n    <GoogleMap\n      mapContainerStyle={mapContainerStyle}\n      zoom={17}\n      center={center}\n    >\n      <DrawingManager\n        onPolygonComplete={(polygon) => {\n          const path = polygon.getPath().getArray().map((latLng) => ({\n            lat: latLng.lat(),\n            lng: latLng.lng(),\n          }));\n          console.log('Polygon Coordinates:', path);\n          polygon.setMap(null); // Clear the drawn shape if needed\n        }}\n        onCircleComplete={(circle) => {\n          const center = circle.getCenter();\n          const radius = circle.getRadius();\n          console.log('Circle Center:', center.toJSON(), 'Radius:', radius);\n          circle.setMap(null); // Clear the drawn shape if needed\n        }}\n        options={{\n          drawingControl: true,\n          drawingControlOptions: {\n            drawingModes: ['polygon', 'rectangle', 'circle'],\n          },\n        }}\n      />\n    </GoogleMap>\n  );\n};\n\nexport default MapComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,aAAa,EAAEC,cAAc,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElF,MAAMC,SAAS,GAAG,CAAC,SAAS,CAAC;AAC7B,MAAMC,iBAAiB,GAAG;EACxBC,MAAM,EAAE,OAAO;EACfC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,MAAM,GAAG;EAAEC,GAAG,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAkB,CAAC,CAAC,CAAC;;AAEpE,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGf,aAAa,CAAC;IAC5CgB,gBAAgB,EAAE,yCAAyC;IAAE;IAC7DZ;EACF,CAAC,CAAC;EAEF,IAAIW,SAAS,EAAE,oBAAOZ,OAAA;IAAAc,QAAA,EAAK;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACnD,IAAI,CAACP,QAAQ,EAAE,oBAAOX,OAAA;IAAAc,QAAA,EAAK;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEhD,oBACElB,OAAA,CAACJ,SAAS;IACRM,iBAAiB,EAAEA,iBAAkB;IACrCiB,IAAI,EAAE,EAAG;IACTd,MAAM,EAAEA,MAAO;IAAAS,QAAA,eAEfd,OAAA,CAACF,cAAc;MACbsB,iBAAiB,EAAGC,OAAO,IAAK;QAC9B,MAAMC,IAAI,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAEC,MAAM,KAAM;UACzDpB,GAAG,EAAEoB,MAAM,CAACpB,GAAG,CAAC,CAAC;UACjBC,GAAG,EAAEmB,MAAM,CAACnB,GAAG,CAAC;QAClB,CAAC,CAAC,CAAC;QACHoB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEN,IAAI,CAAC;QACzCD,OAAO,CAACQ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;MACxB,CAAE;MACFC,gBAAgB,EAAGC,MAAM,IAAK;QAC5B,MAAM1B,MAAM,GAAG0B,MAAM,CAACC,SAAS,CAAC,CAAC;QACjC,MAAMC,MAAM,GAAGF,MAAM,CAACG,SAAS,CAAC,CAAC;QACjCP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEvB,MAAM,CAAC8B,MAAM,CAAC,CAAC,EAAE,SAAS,EAAEF,MAAM,CAAC;QACjEF,MAAM,CAACF,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;MACvB,CAAE;MACFO,OAAO,EAAE;QACPC,cAAc,EAAE,IAAI;QACpBC,qBAAqB,EAAE;UACrBC,YAAY,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,QAAQ;QACjD;MACF;IAAE;MAAAxB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEhB,CAAC;AAACR,EAAA,CAvCIF,YAAY;EAAA,QACgBX,aAAa;AAAA;AAAA2C,EAAA,GADzChC,YAAY;AAyClB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}